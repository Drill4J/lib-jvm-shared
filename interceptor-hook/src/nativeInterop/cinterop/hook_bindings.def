package = com.epam.drill.hook.gen
headers = funchook.h
compilerOpts = -std=c99
compilerOpts.mingw_x64 = -DMINGW
staticLibraries.mingw = hook.lib
staticLibraries.linux = libdistorm.a hook.a
staticLibraries.osx = libdistorm.a hook.a
libraryPaths.mingw = src/nativeInterop/cinterop/mingwX64
libraryPaths.linux = src/nativeInterop/cinterop/linuxX64
libraryPaths.osx = src/nativeInterop/cinterop/macosX64

---

#if defined(__linux__) && !defined(_GNU_SOURCE)
#define _GNU_SOURCE
#endif
#ifdef MINGW
#define _CRT_SECURE_NO_WARNINGS
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

#ifdef MINGW
#include <windows.h>
#include <winsock2.h>
#include <io.h>
#define mode_t int
#define ssize_t int
#define open _open
/* cast the third argument of _read to suppress warning C4267 */
#define read(fd, buf, count) _read((fd), (buf), (unsigned int)(count))
/* cast the second argument of fgets to suppress warning C4267 */
#define fgets(s, size, fp) fgets((s), (int)(size), (fp))
#define close _close
#pragma comment(lib, "ws2_32.lib")
#pragma comment(lib, "psapi.lib")
typedef SOCKET DRILL_SOCKET;
typedef int drill_sock_len;
int (*wsaSend_func)(SOCKET, LPWSABUF, DWORD, LPDWORD, DWORD, LPWSAOVERLAPPED, LPWSAOVERLAPPED_COMPLETION_ROUTINE) = WSASend;
static void **wsaSend_func_point = (void **) &wsaSend_func;

int (*wsaRecv_func)(SOCKET, LPWSABUF, DWORD, LPDWORD, LPDWORD, LPWSAOVERLAPPED, LPWSAOVERLAPPED_COMPLETION_ROUTINE) = WSARecv;
static void **wsaRecv_func_point = (void **) &wsaRecv_func;


int isValidSocket(DRILL_SOCKET soc){
    if(soc == INVALID_SOCKET){
        return -1;
    } else {
        return 0;
    }
}


#else
#include <sys/socket.h>
#include <sys/uio.h>
#include <unistd.h>
#include <dlfcn.h>

typedef int DRILL_SOCKET;
typedef socklen_t drill_sock_len;

ssize_t (*writev_func)(int, const struct iovec *, int) = writev;
static void **writev_func_point = (void **) &writev_func;

ssize_t (*readv_func)(int, const struct iovec *, int) = readv;
static void **readv_func_point = (void **) &readv_func;
int isValidSocket(DRILL_SOCKET soc){
    if(soc == -1){
        return -1;
    } else {
        return 0;
    }
}

#endif

#include <funchook.h>

#ifdef MINGW
//#define DLLEXPORT __declspec(dllexport)
#else
//#define DLLEXPORT
#endif

#ifdef __GNUC__
#define NOINLINE __attribute__((noinline))
#endif
#ifdef _MSC_VER
#define NOINLINE __declspec(noinline)
#endif

#if defined(__APPLE__) && defined(__clang_major__) && __clang_major__ >= 11
#define SKIP_TESTS_CHANGING_EXE
#endif

typedef int (*int_func_t)(void);


#if defined(WIN32) || defined(__APPLE__)

//extern void set_int_val(int val);

#else
#define set_int_val(val) do {} while(0)
#endif

#ifdef _MSC_VER
int reset_retval()
{
    return 0;
}
#endif

#if defined(WIN32)
//__declspec(dllexport) int int_val = 0xbaceba11;
#else
int int_val = 0xbaceba11;
#endif


//____________________________________________________________________________sockets
int (*connect_func)(DRILL_SOCKET, const struct sockaddr *, drill_sock_len) = connect;
static void **connect_func_point = (void **) &connect_func;

DRILL_SOCKET (*accept_func)(DRILL_SOCKET, struct sockaddr *, drill_sock_len *) = accept;
static void **accept_func_point = (void **) &accept_func;

int (*close_func)(DRILL_SOCKET) = close;
static void **close_func_point = (void **) &close_func;


ssize_t (*send_func)(DRILL_SOCKET, const void *, size_t, int) = send;
static void **send_func_point = (void **) &send_func;

ssize_t (*recv_func)(DRILL_SOCKET, void *, size_t, int) = recv;
static void **recv_func_point = (void **) &recv_func;

//____________________________________________________________________________sockets


static ssize_t (*read_func)(int, void *, size_t) = read;
static void **read_func_point = (void **) &read_func;

static ssize_t (*write_func)(int, const void *, size_t) = write;
static void **write_func_point = (void **) &write_func;

