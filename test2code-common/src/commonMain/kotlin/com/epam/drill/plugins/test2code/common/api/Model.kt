/**
 * Copyright 2020 - 2022 EPAM Systems
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.epam.drill.plugins.test2code.common.api

import kotlinx.serialization.*

/**
 * Ast metadata about the file or the class containing methods
 * @param path the path to class or file
 * @param name the name of class or file
 * @param methods the list of methods
 */
@Serializable
data class AstEntity(
    val path: String,
    val name: String,
    var methods: List<AstMethod>,
)

/**
 * Ast metadata about the method of class or file
 * @param name the name of the method
 * @param params the list of parameters of the method
 * @param returnType the method return type
 * @param probes the probe indices of the method
 * @param checksum the checksum of the method body
 */
@Serializable
data class AstMethod(
    val name: String,
    val params: List<String>,
    val returnType: String,
    val probes: List<Int> = emptyList(),
    val checksum: String = "",
    val probesStartPos: Int = 0,
) {
    val count: Int = probes.size
}

/**
 * Class probes received by a specific test
 */
@Serializable
data class ExecClassData(
    val id: Long? = null,
    val className: String,
    @Serializable(with = BitSetSerializer::class)
    var probes: Probes,
    val sessionId: String? = null,
    /**
     * It's full test name hashed by CRC32 algorithm
     */
    val testId: String
){
    // Generated by IDEA, all fields included
    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as ExecClassData

        if (id != other.id) return false
        if (className != other.className) return false
        if (probes != other.probes) return false
        if (sessionId != other.sessionId) return false
        if (testId != other.testId) return false

        return true
    }

    // Calculating hashcode value without probes.
    // We need to update ExeclassData instead of storing a new one.
    override fun hashCode(): Int {
        var result = id?.hashCode() ?: 0
        result = 31 * result + className.hashCode()
        result = 31 * result + (sessionId?.hashCode() ?: 0)
        result = 31 * result + testId.hashCode()
        return result
    }
}
